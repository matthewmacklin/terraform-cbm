---
service: cb-tf-matt


frameworkVersion: ">=2.0.0"

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-plugin-ifelse



provider:
  name: aws
  region: ${self:custom.region}
  # stage: ${self:custom.stage}
  stage: ${opt:stage}



  runtime: nodejs12.x
  apiGateway:
    # https://www.serverless.com/framework/docs/deprecations/#AWS_API_GATEWAY_NAME_STARTING_WITH_SERVICE
    shouldStartNameWithService: true

  # stackPolicy:
  #   - Effect: Deny
  #     Action: "Update:*"
  #     Principal: "*"
  #     Resource: "*"

  stackPolicy:
    - Effect: ${self:custom.stackPolicyEffect.${self:provider.stage}, self:custom.stackPolicyEffect.default}
      Action: "Update:*"
      Principal: "*"
      Resource: "*"
    

custom:
  region: eu-west-2

  # Get variables from the 'serverless.env.yml' file. You need to create this file - see the README.md.
  # stage: ${file(./serverless.env.yml):stage}
  # currentStage: ${file(./serverless.env.yml):stage}
  # stage: ${file(./stage-config.yml):{${file(./serverless.env.yml):stage, opt:stage}}, '${file(./serverless.env.yml):stage}' }
  # stage: ${file(./stage-config.yml).${opt:stage}, '${file(./serverless.env.yml):stage}' }

  # stage: ${file(./stage-config.yml):${file(./serverless.env.yml):stage, opt:stage}, '${file(./serverless.env.yml):stage}' }

  # stage: ${file(./stage-config.yml):${opt:stage, '${file(./serverless.env.yml):stage}' }, '${file(./serverless.env.yml):stage}' }

  # stage: ${file(./serverless.env.yml):stage}

  awsAccountId: ${file(./serverless.env.yml):AWS_ACCOUNT_ID}

  # stackPolicyEffect:
  #   prod: Deny
  #   uat: Deny
  #   default: Allow
  
  stackPolicyEffect:
    prod: Deny
    uat: Deny
    default: Allow

 
  

functions:
  #
  # TypeGraphQL / ES Search lambda
  #
  hello-world:
    handler: handlers/hello.main
    events:
      - http:
          path: hello
          method: get
     
# # Outputs for E2E test framework (will appear in stack-output/stack.yml)
# Outputs:
#   DdbTableName:
#     Value: ${self:custom.dynamoDbTable}
#   ApiKeyGSIName:
#     Value: ${self:custom.indexName}
#   AWSRegion:
#     Value: ${self:custom.region}
